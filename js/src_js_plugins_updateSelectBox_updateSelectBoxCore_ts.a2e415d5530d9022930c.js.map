{"version":3,"file":"src_js_plugins_updateSelectBox_updateSelectBoxCore_ts.a2e415d5530d9022930c.js","mappings":";;;;;;;;;;;;;;;;AAA6D;AACN;AACvD;AACA;AACA;AACA;AACA;AACA,qBAAqB,0EAAqB;AAC1C;AACA,oBAAoB,8GAAyD;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,CAAC;AACjB;AACA;AACA,gBAAgB,CAAC;AACjB;AACA;AACA,gBAAgB,CAAC;AACjB;AACA;AACA,gBAAgB,CAAC;AACjB;AACA;AACA,YAAY,CAAC;AACb,qDAAqD,mGAA8C;AACnG,gBAAgB,+FAA0C;AAC1D;AACA;AACA;AACA,gBAAgB,CAAC;AACjB,gBAAgB,CAAC;AACjB;AACA;AACA,gBAAgB,CAAC;AACjB;AACA;AACA;AACA,oBAAoB,CAAC,mEAAmE;AACxF,oBAAoB,CAAC;AACrB,oBAAoB,CAAC;AACrB,yHAAyH,6DAAO;AAChI,oBAAoB,CAAC;AACrB,oBAAoB,CAAC,oDAAoD,8DAAQ,4BAA4B;AAC7G;AACA;AACA,oBAAoB,CAAC;AACrB,oBAAoB,CAAC;AACrB,oBAAoB,CAAC;AACrB,oBAAoB,CAAC;AACrB,oBAAoB,CAAC;AACrB,oBAAoB,CAAC;AACrB;AACA,oBAAoB,CAAC;AACrB,oBAAoB,CAAC;AACrB,oBAAoB,CAAC;AACrB;AACA;AACA;AACA,gBAAgB,CAAC;AACjB,gBAAgB,CAAC;AACjB,gBAAgB,CAAC;AACjB,gBAAgB,CAAC;AACjB,gBAAgB,CAAC;AACjB;AACA;AACA;AACA;AACA;AACA,wBAAwB,CAAC;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,CAAC;AACrB;AACA;AACA;AACA,gBAAgB,CAAC;AACjB;AACA,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA,IAAI,0EAAqB;AACzB;AACA;AACA;AACA,KAAK;AACL","sources":["webpack://keeptrack.space/./src/js/plugins/updateSelectBox/updateSelectBoxCore.ts"],"sourcesContent":["import { DEG2RAD, cKmPerMs } from '@app/js/lib/constants.js';\nimport { keepTrackApi } from '@app/js/api/externalApi';\nvar updateSelectBoxCore = {\n    sensorInfo: {\n        isLoaded: false,\n        cbName: 'sensorInfo',\n        cb: function (sat) {\n            var _a = keepTrackApi.programs, satellite = _a.satellite, missileManager = _a.missileManager, timeManager = _a.timeManager, settingsManager = _a.settingsManager, objectManager = _a.objectManager, sensorManager = _a.sensorManager, uiManager = _a.uiManager;\n            if (!sat.missile) {\n                if (keepTrackApi.programs.objectManager.isSensorManagerLoaded) {\n                    sat.getTEARR();\n                }\n            }\n            else {\n                satellite.setTEARR(missileManager.getMissileTEARR(sat));\n            }\n            if (satellite.degreesLong(satellite.currentTEARR.lon) >= 0) {\n                $('#sat-longitude').html(satellite.degreesLong(satellite.currentTEARR.lon).toFixed(3) + '°E');\n            }\n            else {\n                $('#sat-longitude').html((satellite.degreesLong(satellite.currentTEARR.lon) * -1).toFixed(3) + '°W');\n            }\n            if (satellite.degreesLat(satellite.currentTEARR.lat) >= 0) {\n                $('#sat-latitude').html(satellite.degreesLat(satellite.currentTEARR.lat).toFixed(3) + '°N');\n            }\n            else {\n                $('#sat-latitude').html((satellite.degreesLat(satellite.currentTEARR.lat) * -1).toFixed(3) + '°S');\n            }\n            var jday = timeManager.getDayOfYear(timeManager.propTimeVar);\n            $('#jday').html(jday);\n            if (settingsManager.plugins.stereoMap && keepTrackApi.programs.mapManager.isMapMenuOpen && timeManager.now > settingsManager.lastMapUpdateTime + 30000) {\n                keepTrackApi.programs.mapManager.updateMap();\n                settingsManager.lastMapUpdateTime = timeManager.now;\n            }\n            if (!sat.missile) {\n                $('#sat-altitude').html(sat.getAltitude().toFixed(2) + ' km');\n                $('#sat-velocity').html(sat.velocity.total.toFixed(2) + ' km/s');\n            }\n            else {\n                $('#sat-altitude').html(satellite.currentTEARR.alt.toFixed(2) + ' km');\n            }\n            if (objectManager.isSensorManagerLoaded) {\n                if (satellite.currentTEARR.inview) {\n                    $('#sat-azimuth').html(satellite.currentTEARR.az.toFixed(0) + '°'); // Convert to Degrees\n                    $('#sat-elevation').html(satellite.currentTEARR.el.toFixed(1) + '°');\n                    $('#sat-range').html(satellite.currentTEARR.rng.toFixed(2) + ' km');\n                    var beamwidthString = sensorManager.currentSensor.beamwidth ? (satellite.currentTEARR.rng * Math.sin(DEG2RAD * sensorManager.currentSensor.beamwidth)).toFixed(2) + ' km' : 'Unknown';\n                    $('#sat-beamwidth').html(beamwidthString);\n                    $('#sat-maxTmx').html(((satellite.currentTEARR.rng / cKmPerMs) * 2).toFixed(2) + ' ms'); // Time for RF to hit target and bounce back\n                }\n                else {\n                    $('#sat-azimuth').html('Out of FOV');\n                    $('#sat-azimuth').prop('title', 'Azimuth: ' + satellite.currentTEARR.az.toFixed(0) + '°');\n                    $('#sat-elevation').html('Out of FOV');\n                    $('#sat-elevation').prop('title', 'Elevation: ' + satellite.currentTEARR.el.toFixed(1) + '°');\n                    $('#sat-range').html('Out of FOV');\n                    $('#sat-range').prop('title', 'Range: ' + satellite.currentTEARR.rng.toFixed(2) + ' km');\n                    var beamwidthString = sensorManager.currentSensor.beamwidth ? sensorManager.currentSensor.beamwidth + '°' : 'Unknown';\n                    $('#sat-beamwidth').html('Out of FOV');\n                    $('#sat-beamwidth').prop('title', beamwidthString);\n                    $('#sat-maxTmx').html('Out of FOV');\n                }\n            }\n            else {\n                $('#sat-azimuth').parent().hide();\n                $('#sat-elevation').parent().hide();\n                $('#sat-range').parent().hide();\n                $('#sat-beamwidth').parent().hide();\n                $('#sat-maxTmx').parent().hide();\n            }\n            if (objectManager.isSensorManagerLoaded) {\n                if (sensorManager.checkSensorSelected()) {\n                    // If we didn't just calculate next pass time for this satellite and sensor combination do it\n                    if (objectManager.selectedSat !== uiManager.lastNextPassCalcSatId && sensorManager.currentSensor.shortName !== uiManager.lastNextPassCalcSensorId && !sat.missile) {\n                        $('#sat-nextpass').html(satellite.nextpass(sat));\n                        // IDEA: Code isInSun()\n                        //sun.getXYZ();\n                        //lineManager.create('ref',[sun.sunvar.position.x,sun.sunvar.position.y,sun.sunvar.position.z]);\n                    }\n                    uiManager.lastNextPassCalcSatId = objectManager.selectedSat;\n                    uiManager.lastNextPassCalcSensorId = sensorManager.currentSensor.shortName;\n                }\n                else {\n                    $('#sat-nextpass').html('Unavailable');\n                }\n            }\n            else {\n                $('#sat-nextpass').parent().hide();\n            }\n        },\n    },\n};\nexport var init = function () {\n    // Register updateSelectBox\n    keepTrackApi.register({\n        method: 'updateSelectBox',\n        cbName: 'sensorInfo',\n        cb: updateSelectBoxCore.sensorInfo.cb,\n    });\n};\n"],"names":[],"sourceRoot":""}